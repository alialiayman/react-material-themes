{"version":3,"sources":["Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","Fragment","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Container","TextField","label","fullWidth","error","FormControlLabel","control","Checkbox","Radio","Fab","FormControl","InputLabel","htmlFor","Select","native","value","Paper","elevation","style","height","Divider","Card","CardContent","gutterBottom","component","CardActions","size","purpleTheme","createMuiTheme","palette","primary","purple","secondary","green","type","defaultTheme","defaultDarkTheme","App","useState","name","theme","state","setState","className","onChange","event","target","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c19d9d04.chunk.js","sourcesContent":["import React from 'react'\nimport { TextField, Button, Paper, Divider,AppBar, Toolbar, FormControlLabel, Checkbox, Container, Radio, Fab, FormControl, InputLabel, Select } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst Home: React.FC = () => {\n    return (\n        <React.Fragment>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" >\n                        News\n    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container>\n                <TextField label=\"Outlined\" variant=\"outlined\" fullWidth></TextField>\n                <TextField label=\"Outlined\" variant=\"outlined\" fullWidth error></TextField>\n\n                <Button variant=\"contained\">Default</Button>\n                <Button variant=\"contained\" color=\"primary\">\n                    Primary\n</Button>\n                <Button variant=\"contained\" color=\"secondary\">\n                    Secondary\n</Button>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                        />\n                    }\n                    label=\"Default\"\n                />\n\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Primary\"\n                />\n\n                <FormControlLabel\n                    control={<Checkbox />}\n                    label=\"Secondary\"\n                />\n\n                <FormControlLabel control={<Radio />} label=\"Default\" />\n                <FormControlLabel control={<Radio color=\"primary\" />} label=\"Primary\" />\n                <FormControlLabel control={<Radio color=\"secondary\" />} label=\"Seconday\" />\n\n                <Fab color=\"primary\" aria-label=\"add\">\n                    <AddIcon />\n                </Fab>\n                <Fab color=\"secondary\" aria-label=\"edit\">\n                    <EditIcon />\n                </Fab>\n\n\n                <FormControl variant=\"outlined\" >\n                    <InputLabel htmlFor=\"outlined-age-native-simple\">Age</InputLabel>\n                    <Select\n                        native\n                        label=\"Age\"\n                    >\n                        <option aria-label=\"None\" value=\"\" />\n                        <option value={10}>Ten</option>\n                        <option value={20}>Twenty</option>\n                        <option value={30}>Thirty</option>\n                    </Select>\n                </FormControl>\n\n                <Paper elevation={5} style={{height: '50px'}}>\n\n                    test on paper\n                    </Paper>\n\n<Divider></Divider>\n                <Card >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Word of the Day\n        </Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            Test Test Test\n        </Typography>\n                        <Typography color=\"textSecondary\">\n                            adjective\n        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            well meaning and kindly.\n          <br />\n                            {'\"a benevolent smile\"'}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <Button size=\"small\">Learn More</Button>\n                    </CardActions>\n                </Card>\n            </Container>\n        </React.Fragment>\n    )\n\n}\n\nexport default Home;","import React, { useState } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport { FormControl, InputLabel, Select } from '@material-ui/core';\n\nconst purpleTheme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: green,\n    type: 'light'\n\n  },\n});\n\nconst defaultTheme = createMuiTheme({\n  palette: {\n    type: 'light'\n  },\n});\n\nconst defaultDarkTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  },\n});\n\nfunction App() {\n  const [state, setState] = useState({ name: 'default', theme: defaultTheme });\n\n  const handleThemeChange = (event: any) => {\n    switch (event.target.value) {\n      case 'defaultDarkTheme':\n        return setState({ name: event.target.value, theme: defaultDarkTheme })\n      case 'DefaultTheme':\n        return setState({ name: event.target.value, theme: defaultTheme })\n      case 'purpleTheme':\n        return setState({ name: event.target.value, theme: purpleTheme })\n\n      default:\n        return setState({ name: event.target.value, theme: defaultDarkTheme })\n\n    }\n  }\n  return (\n\n    <div className=\"App\">\n      <FormControl variant=\"outlined\" >\n        <InputLabel htmlFor=\"outlined-age-native-simple\" >Select Theme</InputLabel>\n        <Select\n          label=\"Theme\"\n          fullWidth\n          value={state.name} onChange={handleThemeChange}\n        >\n          <option value=\"defaultTheme\">Default</option>\n          <option value=\"defaultDarkTheme\">Default Dark</option>\n          <option value=\"purpleTheme\">Purple</option>\n        </Select>\n      </FormControl>\n      <ThemeProvider theme={state.theme}>\n        <Home></Home>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}